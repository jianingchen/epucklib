
/*!

\defgroup EL_CAMERA Camera

\section sec1 Introduction

In this library, the resolution of the image captured by the camera 
is fixed to 40x15 with a frame rate of 18.432. 
This resolution is a result of subsampling, which means field of view (FOV) 
of the image is not lost. The horizontal FOV of the camera is about 56 deg 
while the vertical FOV is about 42 deg. Both FOV are almost fully covered in 
the captured image. 

The camera module in this library uses dual-buffer-swapping mechanism. At 
any moment, data acquired from the camera are written to frame buffer A 
(the front buffer) while any reading functions read data from frame buffer B 
(the back buffer). Once a frame is fully written, pointers to the two buffers 
will be swapped. This mechanism allows a frame of image to be processed 
concurrently with the acquisition of next frame. 


\section sec2 Usage

To run something when a frame of image is ready, create a trigger 
with EL_EVENT_CAMERA_FRAME_UPDATE event. 

Before reading data in the frame buffer, it (the back buffer) needs 
to be locked. The following mechanism is a typical loop to process a frame:
\code
    ...
    el_uint8 RGB[3];
    int X,Y,W,H;
    ...
    el_camera_lock_frame();
    W = el_camera_get_frame_width();
    H = el_camera_get_frame_height();
    for(X=0;X<W;X++){
        for(Y=0;Y<H;Y++){
            
            el_camera_get_frame_pixel( X, Y, RGB );
            
            // image process algorithm
            ...
        }
    }
    el_camera_unlock_frame();
    ...
\endcode
When the frame buffer is locked, no further buffer swapping will occur. 
Therefore, to get a full frame rate of 18.432, the time cost of the image 
processing code needs to be less than the update interval of the frames. 

See Example 2 for a systematic usage of the camera module with some image 
processing techniques. 

*/
 